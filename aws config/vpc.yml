---
AWSTemplateFormatVersion: 2010-09-09
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
     VpcId: !Ref VPC
     InternetGatewayId: !Ref InternetGateway

  SubnetPrivate:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-southeast-2a
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/19
      MapPublicIpOnLaunch: false
      Tags:
       - Key: Name
         Value: PrivateSubnet

  SubnetPrivateb:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-southeast-2b
      VpcId: !Ref VPC
      CidrBlock: 10.0.64.0/19
      MapPublicIpOnLaunch: false
      Tags:
       - Key: Name
         Value: PrivateSubnetb

  SubnetPrivatec:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-southeast-2c
      VpcId: !Ref VPC
      CidrBlock: 10.0.128.0/19
      MapPublicIpOnLaunch: false
      Tags:
       - Key: Name
         Value: PrivateSubnetc

  SubnetPublic:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-southeast-2a
      VpcId: !Ref VPC
      CidrBlock: 10.0.32.0/20
      MapPublicIpOnLaunch: true
      Tags:
       - Key: Name
         Value: PublicSubnet

  SubnetPublicb:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-southeast-2b
      VpcId: !Ref VPC
      CidrBlock: 10.0.96.0/20
      MapPublicIpOnLaunch: true
      Tags:
       - Key: Name
         Value: PublicSubnetb

  SubnetPublicc:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-southeast-2c
      VpcId: !Ref VPC
      CidrBlock: 10.0.160.0/20
      MapPublicIpOnLaunch: true
      Tags:
       - Key: Name
         Value: PublicSubnetc

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  InternetRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTable

  RouteTablePrivate:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  
  SubnetPublicRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetPublic

  SubnetPublicbRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetPublicb

  SubnetPubliccRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetPublicc
      
  SubnetPrivateRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTablePrivate
      SubnetId: !Ref SubnetPrivate

  SubnetPrivatebRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTablePrivate
      SubnetId: !Ref SubnetPrivateb

  SubnetPrivatecRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTablePrivate
      SubnetId: !Ref SubnetPrivatec
      
  PublicNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: PublicNACL
        
  PrivateNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: PrivateNACL

  PublicNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref SubnetPublic
      NetworkAclId: !Ref PublicNetworkAcl

  PublicbNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref SubnetPublicb
      NetworkAclId: !Ref PublicNetworkAcl
  PubliccNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref SubnetPublicc
      NetworkAclId: !Ref PublicNetworkAcl
      
  PublicNetworkAclEntry1:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PublicNetworkAcl
      RuleNumber: '101'
      Protocol: "6"
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '22'
        To: '22'
        
  PublicNetworkAclEntry2:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PublicNetworkAcl
      RuleNumber: '100'
      Protocol: "6"
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '80'
        To: '80'
        

  PublicNetworkAclEntry3:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PublicNetworkAcl
      RuleNumber: '105'
      Protocol: "6"
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '443'
        To: '443'
        
  PublicNetworkAclEntry4:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PublicNetworkAcl
      RuleNumber: '110'
      Protocol: "6"
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '1024'
        To: '65535'

  PublicNetworkAclEntry5:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PublicNetworkAcl
      RuleNumber: '130'
      Protocol: "6"
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '1024'
        To: '65535'

  PublicNetworkAclEntry6:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PublicNetworkAcl
      RuleNumber: '150'
      Protocol: "6"
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 10.0.0.0/8
      PortRange:
        From: '22'
        To: '22'

  PublicNetworkAclEntry7:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PublicNetworkAcl
      RuleNumber: '250'
      Protocol: "6"
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '80'
        To: '80'

  PublicNetworkAclEntry8:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PublicNetworkAcl
      RuleNumber: '200'
      Protocol: "6"
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '443'
        To: '443'

  PrivateNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref SubnetPrivate
      NetworkAclId: !Ref PrivateNetworkAcl

  PrivatebNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref SubnetPrivateb
      NetworkAclId: !Ref PrivateNetworkAcl

  PrivatecNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref SubnetPrivatec
      NetworkAclId: !Ref PrivateNetworkAcl

  PrivateNetworkAclEntry1:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PrivateNetworkAcl
      RuleNumber: '100'
      Protocol: "6"
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 10.0.0.0/8
      PortRange:
        From: '22'
        To: '22'

  PrivateNetworkAclEntry10:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PrivateNetworkAcl
      RuleNumber: '300'
      Protocol: "6"
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 10.0.0.0/8
      PortRange:
        From: '22'
        To: '22'

  PrivateNetworkAclEntry2:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PrivateNetworkAcl
      RuleNumber: '110'
      Protocol: "6"
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '1024'
        To: '65535'

  PrivateNetworkAclEntry3:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PrivateNetworkAcl
      RuleNumber: '100'
      Protocol: "6"
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 10.0.0.0/8
      PortRange:
        From: '32768'
        To: '65535'

  PrivateNetworkAclEntry4:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PrivateNetworkAcl
      RuleNumber: '110'
      Protocol: "6"
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '80'
        To: '80'
  PrivateNetworkAclEntry40:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PrivateNetworkAcl
      RuleNumber: '160'
      Protocol: "6"
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '80'
        To: '80'

  PrivateNetworkAclEntry5:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PrivateNetworkAcl
      RuleNumber: '120'
      Protocol: "6"
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '443'
        To: '443'

  PrivateNetworkAclEntry6:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PrivateNetworkAcl
      RuleNumber: '90'
      Protocol: "6"
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '1024'
        To: '65535'

  NAT:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
        - EIP
        - AllocationId
      SubnetId: !Ref SubnetPublic
      Tags:
       - Key: Name
         Value: NatGateway

  EIP:
    Type: AWS::EC2::EIP
    Properties:
     Domain: !Ref VPC
  Route:
   Type: AWS::EC2::Route
   Properties:
    RouteTableId:
      Ref: RouteTablePrivate
    DestinationCidrBlock: 0.0.0.0/0
    NatGatewayId:
      Ref: NAT     
        
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "Security group for ssh and other traffic"
      GroupDescription: "This security group is used for ssh"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

Outputs:
  VPC:
    Description:  VPC id.
    Value:        !Ref VPC
    Export:
      Name: customvpc
  SubnetPrivate:
    Description:  Subnet Id
    Value:        !Ref SubnetPrivate
    Export:
      Name: privsubnet
  SubnetPrivateb:
    Description:  Subnet Id
    Value:        !Ref SubnetPrivateb
    Export:
      Name: privsubnetb
  SubnetPrivatec:
    Description:  Subnet Id
    Value:        !Ref SubnetPrivatec
    Export:
      Name: privsubnetc
  SubnetPublic:
    Description:  Subnet Id
    Value:        !Ref SubnetPublic
    Export:
      Name: pubsubnet
  SubnetPublicb:
    Description:  Subnet Id
    Value:        !Ref SubnetPublicb
    Export:
      Name: pubsubnetb
  SubnetPublicc:
    Description:  Subnet Id
    Value:        !Ref SubnetPublicc
    Export:
      Name: pubsubnetc
